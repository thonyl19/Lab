<script type="text/x-template" id="cp_posi_map">
    <el-row :gutter="10">
		<template v-for="(row,idx) in Map_MO">
			<template v-for="(point,posi) in row">
				<el-col :xs="12" :sm="8" :md="6" :lg="4" :xl="4" :span="8" :ref="point.el_id" :class="['posi',point.isEmpty?'':'used',current.posi==posi?'input':'',point_size]"
						@@click.native="point.focus()" @@dblclick.native.stop="point.chg_sts()">
					<span class="src-val">{{point.src.val}}</span>
					<i :class="['posi-sn',point.sts_sty]" @@click="point.chg_sts()">{{point.sn}}</i>
                    <i :class="['posi-sn adj',point.sts_sty]" >{{point.sn}}</i>
				</el-col>
			</template>
		</template>
	</el-row>
</script>
<script>
    /*
    客戶的處理行為 , 改成 報廢 時一併 置換成最後一片 , 故此變更處理程序 ,此一版保留於 此
     */
    $(() => {
        Vue.component('cp-posi-map', {
            template: '#cp_posi_map',
            mixins: [Vue.prototype.$UT.Mixins.PosiMap()],
            data() {
                return {
                    isOnlyEmpty:false,
                    piece_size: 1,
				}
            },
            props: {
                readonly: {
                    type: Boolean,
                    default:false
                }
            },
 			methods: {
				//解決 src 內 mvvm 機制的問題
				parseSrc(src) {
                    this.$set(src, 'val', 0);
					this.$set(src, 'sts', 0);
					Object.defineProperty(src, 'val', {
                        get() {
                            debugger
                            let { SID } = this;
                            SID = SID ?? '　';
                            return SID;
                        },
						set(val) { return this.SID = val; }
                    });
                    Object.defineProperty(src, 'sts', {
                        get() {
                            let { STATUS } = this;
                            STATUS = STATUS ?? "Wait";
                            return STATUS == "Wait"?"0":"1";
                        },
                        set(val) {
                            var def = "Wait";
                            if (val == "1") def = "Scrap";
                            this.STATUS = def;
                        }
                    });
					return src;
				},
				genPosiMap(total = 24, row_count = 6) {
					var map = [];
					for (var no = 1; no <= total; no++) {
						var _map = {};
						_map[`${no}`] = 0;
						map.push(_map);
					}
					return map;
				},
                parsePOSI(sn, posi, srcObj) {
                    var _self = this;
                    var src = _self.parseSrc(srcObj);
                    var _posiObj = {
                        sn,
                        posi,
                        src,
                        get el_id() {
                            return `${this.posi}_${this.sn}`;
                        },
                        get_el() {
                            let [_el] = _self.$refs[this.el_id] || [null]
                            return _el;
                        },
                        get isCanUse() {
                            var isNotMark = (_self.SkipMark && this.src.sts == "1") == false;
                            return this.isEmpty && isNotMark;
                        },
                        get isEmpty() {
                            var _v = this.src.val ?? ""
                            return _v.replace('　','') === "";
                        },
                        get sts_sty() {
                            return _self.sts_sty[this.src.sts];
                        },
                        Enter() {
                            this.update().focus();
                        },
                        Submit() {
                            _self.srcPOSI[this.sn] = this;
                            this.update().next_point()?.focus();
                        },
                        next_point(AutoReStart = true, startSN = null) {
                            var next = _self.srcPOSI[this.sn + 1];
                            if (next == null) {
                                var isNeedReSearch = AutoReStart && startSN == null;
                                if (isNeedReSearch) {
                                    next = _self.srcPOSI[1];
                                    if (next.isCanUse == false) {
                                        next = next.next_point(AutoReStart, 1);
                                    }
                                    if (next == null) {
                                        _self.$message("己沒有可以使用的位置!!");
                                        return next;
                                    }
                                }
                            } else if (next.isCanUse == false) {
                                next = next.next_point(AutoReStart, startSN);
                            }
                            return next;
                        },
                        focus() { return _self.SetInputIndex(this); },
                        /*
                        NOTE: point.update 將資料回更 list
                        */
                        update() {
                            let { val, sts } = this.src;
                            if (this.isEmpty && sts == "0") {
                                _self.$delete(_self.list, this.posi);
                            } else {
                                _self.$set(_self.list, this.posi, this.src);
                            }
                            if (_self.SyncMode == false) _self.srcPOSI[this.sn] = this;
                            return this;
                        },
                        empty() {
                            if (this.isEmpty) return this;
                            var point = _self.srcPOSI[this.sn];
                            _self.Del(point);
                            return point;
                        },
                        chg_sts() {
                            if (_self.readonly) return this;
                            let { sts } = this.src;
                            this.src.sts = sts == "0" ? "1" : "0";
                            return this;
                        }
                    };
                    return _posiObj;
                },
			}
        })

    });


</script>


<style>
    .posi {
        white-space: nowrap;
        border-radius: 7px;
        border:  2px outset #ebf1de;
        position: relative;
        margin-bottom: 9px;
        padding-right: 5rem !important;
        user-select: none;
    }

        .posi.used {
            background-color: #aeaeae29;
        }

    .src-val {
        line-height: 7rem;
        width: auto;
        text-align: left;
    }

    .posi-sn {
        position: absolute;
        top: 0px;
        right: 0px;
        font-size: 5rem;
        z-index: 999;
        cursor: pointer;
        margin: 0 1rem;
        font-family: sans-serif;
        font-weight: 600;
    }

        .posi-sn.adj {
            left: 0px;
            color: #023bb44f !important;
        }

    div.posi.input {
        border: 2px outset rgb(64, 158, 255) !important;
    }

    div.posi:hover {
        border: 2px outset red;
        cursor: pointer;
    }

    .posi-sn.sts_r {
        color: #ff000033;
    }

    .posi-sn.sts_g {
        color: #02b42933;
    }
</style>